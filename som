#!/usr/bin/env python2.7
import argparse
import sys
import os
import shlex

BASE_DIR    = os.path.dirname(os.path.realpath(__file__))
TRUFFLE_DIR = BASE_DIR + '/libs/truffle'
JAVA_HOME   = os.getenv('JAVA_HOME',  None)
JVMCI_BIN   = os.getenv('JVMCI_BIN',  None)
GRAAL_HOME  = os.getenv('GRAAL_HOME',  None)
GRAAL_FLAGS = os.getenv('GRAAL_FLAGS', None)

##
## Defining Argument Parsing
##
parser = argparse.ArgumentParser(
    description='Helper script to run TruffleSOM with/without Graal')

parser.add_argument('-d', '--debug', help='wait for debugger to attach',
                    dest='debug', action='store_true', default=False)
parser.add_argument('-t', '--num-threads', help='number of threads to be used',
                    dest='threads', default=None)
parser.add_argument('-dnu', '--stack-trace-on-dnu', help='Print a stack trace on #doesNotUnderstand:',
                    dest='som_dnu', action='store_true', default=False)
parser.add_argument('-di', '--dump-ir', help='Dump the IR, i.e., the AST or bytecode of a method',
                    dest='dump_ir', action='store_true', default=False)


explore = parser.add_argument_group('Explore', 'Investigate Execution')
explore.add_argument('-i', '--igv', help='dump compilation details to IGV',
                    dest='igv', action='store_true', default=False)
explore.add_argument('-if', '--igv-to-file', help='dump compilation details to file to be loaded by IGV',
                    dest='igv_to_file', action='store_true', default=False)
explore.add_argument('-io', '--igv-only', help='only dump named method, use of * allowed. Uses Invokable.toString()',
                    dest='only_igv', default=None)
explore.add_argument('-l', '--low-level', help='enable low-level optimization output',
                    dest='low_level', action='store_true', default=False)
explore.add_argument('-ti', '--trace-invalidation', help='trace assumption invalidation and transfers to interpreter',
                    dest='trace_invalidation', action='store_true', default=False)
explore.add_argument('-ts', '--trace-splitting', help='trace splitting decisions',
                    dest='trace_splitting', action='store_true', default=False)
explore.add_argument('-w', '--perf-warnings', help='enable performance warnings',
                    dest='perf_warnings', action='store_true', default=False)

profile = parser.add_argument_group('Profile', 'Profile Execution')
profile.add_argument('-gp', '--graal-profile', help='enable Graal-level profiling after warmup',
                    dest='graal_profile', action='store_true', default=False)
profile.add_argument('-ga', '--graal-profile-allocations', help='enable Graal-level profiling after warmup, and profile allocations',
                    dest='graal_profile_allocations', action='store_true', default=False)
profile.add_argument('-gi', '--graal-profile-intervals', help='enable Graal-level profiling after certain time intervals',
                    dest='graal_profile_timed', action='store_true', default=False)
profile.add_argument('-gb', '--graal-branch-profile', help='enable Graal-level branch profiling',
                    dest='graal_branch_profile', action='store_true', default=False)
profile.add_argument('-tp', '--truffle-profile', help='enable Graal-level profiling after warmup',
                    dest='truffle_profile', action='store_true', default=False)
explore.add_argument('-v', '--visual-vm', help='connect to VisualVM for profiling',
                    dest='visual_vm', action='store_true', default=False)
explore.add_argument('-fr', '--flight-recorder', help='profile with Java Flight Recorder',
                    dest='flight_recorder', action='store_true', default=False)

tools = parser.add_argument_group('Tools', 'Tools for various purposes')
explore.add_argument('-n', '--node-stats', help='collect details about AST nodes. Optionally define output file name. Default: node-stats.yml',
                     dest='nodestats', action='store', nargs='?',
                     const='node-stats.yml', default=False)
explore.add_argument('-cov', '--coverage', help='collect coverage statistics. Optionally define output file. Default is standard out.',
                     dest='coverage', action='store', nargs='?',
                     const='', default=False)
explore.add_argument('-ct', '--coverage-type', help="human readable 'histogram' (per file coverage summary) or 'detailed' (per line coverage summary), machine readable 'json', tool compliant 'lcov'. (default: histogram)",
                     dest='coverage_type', action='store', default='histogram')
explore.add_argument('-cs', '--cpu-sampler', help='Truffle CPU Sampler. [CPUSAMPLE] can be one of histogram, calltree, json',
                     dest='cpusampler', action='store', nargs='?',
                     const='histogram', default=False)

parser.add_argument('-o', '--only', help='only compile give methods, comma separated list',
                    dest='only_compile', default=None)


parser.add_argument('-A', '--no-assert', help='execute with assertions disabled',
                    dest='assert_', action='store_false', default=True)
parser.add_argument('-B', '--no-background', help='disable background compilation',
                    dest='background_compilation', action='store_false', default=True)
parser.add_argument('-C', '--no-compilation', help='disable Truffle compilation',
                    dest='no_compilation', action='store_true', default=False)
parser.add_argument('-G', '--interpreter', help='run without Graal',
                    dest='interpreter', action='store_true', default=False)
parser.add_argument('-EG', '--no-embedded-graal', help='run without the embedded Graal. When set, USE_EMBEDDED_GRAAL, JVMCI_BIN, or GRAAL_HOME are used.',
                    dest='use_embedded_graal', action='store', nargs='?',
                    const=False, default=True)
parser.add_argument('-LG', '--no-libgraal', help='run without using the embedded libgraal, which is a precompiled Graal',
                    dest='use_libgraal', action='store_false', default=True)
parser.add_argument('-X', '--java-interpreter', help='run without Graal, and only the Java interpreter',
                    dest='java_interpreter', action='store_true', default=False)
parser.add_argument('-T', '--no-trace', help='do not print truffle compilation info',
                    dest='no_trace', action='store_false', default=True)
parser.add_argument('--no-graph-pe', help='disable Graph PE',
                    dest='graph_pe', action='store_false', default=True)



parser.add_argument('-vv', '--verbose', action='store_true', default=False,
                    dest='verbose', help="print command-line before executing")
parser.add_argument('--print-graal-options', action='store_true', default=False,
                    dest='print_graal_options', help="print all Graal options")

parser.add_argument('-J', help="Java VM Argument prefix",
                    dest="java_args", action='append')
parser.add_argument('-D', help="define a Java property",
                    dest="java_properties", action='append')


parser.add_argument('args', nargs=argparse.REMAINDER,
                    help='arguments passed to SOMns')
args, unknown_args = parser.parse_known_args()



if args.java_interpreter:
    args.interpreter = True

if args.flight_recorder:
    args.interpreter = True

if args.interpreter:
    args.use_embedded_graal = False

# Handle executable names
if sys.argv[0].endswith('fast'):
    args.assert_ = False
    args.no_trace = True
if sys.argv[0].endswith('debug'):
    args.perf_warnings = True
    args.trace_splitting = True
    args.background_compilation = False
    args.use_libgraal = False

# Determine JVM to be used
java_bin = None

# try local JVMCI, which ant already needed
local_jvmci_bin = BASE_DIR + '/libs/jvmci'
if sys.platform == 'darwin':
  local_jvmci_bin += '/Contents/Home'
local_jvmci_bin += '/bin/java'
if os.path.isfile(local_jvmci_bin):
  java_bin = local_jvmci_bin

if not java_bin and JAVA_HOME:
  java_bin = JAVA_HOME + '/bin/java'

if not java_bin:
  java_bin = "java"


if args.use_embedded_graal is True:
  from subprocess import check_output, STDOUT, CalledProcessError
  try:
    libgraal_jdk_home = check_output(
      [BASE_DIR + '/libs/mx/mx', '--primary-suite-path', BASE_DIR + '/libs/truffle/vm', 'graalvm-home'],
      stderr=STDOUT,
      env = {
        'JAVA_HOME':            java_bin.replace('/bin/java', ''),
        'PATH':                 os.getenv('PATH',  ''),
        # REM: This needs to match build.xml:libgraal-jdk
        'DYNAMIC_IMPORTS':      '/substratevm,/tools,/truffle,/sdk,/compiler',
        'FORCE_BASH_LAUNCHERS': 'true',
        'DISABLE_LIBPOLYGLOT':  'true',
        'EXCLUDE_COMPONENTS':   'svmag,nju,nic,ni,nil,ins,dap,lsp,insight,insightheap,vvm'
      })
    java_bin = libgraal_jdk_home.strip() + '/bin/java'
  except CalledProcessError as e:
    print "Failed to determine location of libgraal"
    print e.output
    sys.exit(1)
else:
    if args.use_embedded_graal is not False:
      if not os.path.isdir(args.use_embedded_graal):
        print("USE_EMBEDDED_GRAAL does not seem to exist: " + args.use_embedded_graal)
        sys.exit(1)
        
      if not os.path.isfile(args.use_embedded_graal + '/bin/java'):
        print("USE_EMBEDDED_GRAAL did not seem to have a bin/java: " + args.use_embedded_graal)
        sys.exit(1)

      java_bin = args.use_embedded_graal + '/bin/java'
    if not java_bin and JVMCI_BIN:
      java_bin = JVMCI_BIN
    if not java_bin and GRAAL_HOME and os.path.isfile(GRAAL_HOME + '/bin/java'):
      java_bin = GRAAL_HOME + '/bin/java'


##
## Defining Necessary Parameter Bits
##

classpath = (BASE_DIR + '/build/classes:'
           + BASE_DIR + '/libs/black-diamonds/build/classes:'
           + TRUFFLE_DIR + '/sdk/mxbuild/dists/graal-sdk.jar:'
           + TRUFFLE_DIR + '/truffle/mxbuild/dists/truffle-api.jar')

TRUFFLE_API_CLASSPATH = (
    TRUFFLE_DIR + '/truffle/mxbuild/dists/truffle-api.jar')

if args.use_libgraal:
  GRAAL_JVMCI_FLAGS = ['-XX:+UnlockExperimentalVMOptions', '-XX:+EnableJVMCI', '-XX:+UseJVMCICompiler', '-XX:+UseJVMCINativeLibrary']
else:
  GRAAL_JVMCI_FLAGS = ['-XX:+UnlockExperimentalVMOptions', '-XX:+EnableJVMCI', '-XX:+UseJVMCICompiler', '-XX:-UseJVMCINativeLibrary']


GRAAL_TRUFFLE_FLAGS = [
  '--module-path=' + TRUFFLE_DIR + '/sdk/mxbuild/dists/graal-sdk.jar:' +
      TRUFFLE_DIR + '/truffle/mxbuild/dists/truffle-api.jar',
  '--upgrade-module-path=' + TRUFFLE_DIR + '/compiler/mxbuild/dists/graal-truffle-compiler-libgraal.jar'
]

ADD_OPEN_FLAGS = [
  '--add-opens=org.graalvm.truffle/com.oracle.truffle.api=ALL-UNNAMED',
  '--add-opens=org.graalvm.truffle/com.oracle.truffle.api.interop=ALL-UNNAMED',
  '--add-opens=org.graalvm.truffle/com.oracle.truffle.api.nodes=ALL-UNNAMED'
]

SOM_ARGS = ['trufflesom.vm.Universe']

# == Compiler Settings
TWEAK_INLINING = ['-Dpolyglot.engine.CompilationThreshold=191',
                  '-Dpolyglot.engine.InliningMaxCallerSize=10000',
                  '-Dpolyglot.engine.SplittingMaxCalleeSize=100000']

JAVA_ARGS = ['-server', '-XX:+UseParallelGC']

##
## Processing Parameters and Assembling Command Line
##

if not args.interpreter and GRAAL_FLAGS:
    flags = shlex.split(str.strip(GRAAL_FLAGS))
else:
    flags = []

flags += GRAAL_TRUFFLE_FLAGS

if args.dump_ir:
    SOM_ARGS += ['-di']

if args.interpreter:
    flags += ['-Dtruffle.TruffleRuntime=com.oracle.truffle.api.impl.DefaultTruffleRuntime',
              '-Dpolyglot.engine.WarnInterpreterOnly=false']
else:
    flags += GRAAL_JVMCI_FLAGS + ADD_OPEN_FLAGS
    flags += ['-Dpolyglot.engine.MultiTier=false',
              '-Dpolyglot.engine.DynamicCompilationThresholds=false',
              '-Dpolyglot.engine.SingleTierCompilationThreshold=253',
              '-Dpolyglot.engine.CompilationFailureAction=ExitVM']

if args.som_dnu:
    flags += ['-Dsom.printStackTraceOnDNU=true']

if args.only_igv:
    args.igv = True

if args.debug:
    flags += ['-Xdebug',
              '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000']
if not args.interpreter and (args.igv or args.igv_to_file):
    flags += ['-Dgraal.Dump=Truffle,TruffleTree:2']
if not args.interpreter and args.only_igv:
    flags += ['-Dpolyglot.engine.MethodFilter=' + args.only_igv]
if not args.interpreter and args.igv_to_file:
    flags += ['-Dpolyglot.engine.PrintIdealGraphFile=true']
if args.low_level:
    flags += ['-XX:+UnlockDiagnosticVMOptions', '-XX:+LogCompilation',
              '-XX:+TraceDeoptimization']
if not args.interpreter and (args.graal_profile or args.graal_profile_allocations or args.graal_profile_timed):
    flags += ['-XX:JVMCICounterSize=5000', '-Dpolyglot.engine.ProfileCompiledMethods=true',
              '-DProfileCompiledMethodsPhase.WITH_SECTION_HEADER=true']
    if args.graal_profile_allocations:
        flags += ['-Dpolyglot.engine.ProfileAllocations=true']
    if args.graal_profile_timed:
        flags += ['-Dpolyglot.engine.TimedDynamicCounters=1000']
    if args.graal_profile:
        flags += ['-Dpolyglot.engine.BenchmarkDynamicCounters=out,completed,total']

if not args.interpreter and args.graal_branch_profile:
    flags += ['-Dpolyglot.engine.InstrumentBranches=true',
              '-Dpolyglot.engine.InstrumentBranchesFilter=*',
              '-Dpolyglot.engine.InstrumentBranchesPerInlineSite=true']

if not args.interpreter and args.perf_warnings:
    flags += ['-Dpolyglot.engine.CompilationExceptionsAreFatal=true',
              '-Dpolyglot.engine.TracePerformanceWarnings=all',
              '-Dpolyglot.engine.TraceCompilation=true',
              '-Dpolyglot.engine.TraceCompilationDetails=true']
if not args.interpreter and args.trace_invalidation:
    flags += ['-Dpolyglot.engine.TraceTransferToInterpreter=true',
              '-Dpolyglot.engine.TraceAssumptions=true']
if not args.interpreter and args.trace_splitting:
    flags += ['-Dpolyglot.engine.TraceSplittingSummary=true',
              '-Dpolyglot.engine.TraceSplitting=true']
if not args.interpreter and args.only_compile:
    flags.append("-Dpolyglot.engine.CompileOnly=%s" % args.only_compile)
if args.visual_vm:
    flags += ['-agentpath:/Users/smarr/Downloads/visualvm_205/visualvm/lib/deployed/jdk16/mac/libprofilerinterface.jnilib=/Users/smarr/Downloads/visualvm_205/visualvm/lib,5140']
if args.flight_recorder:
    flags += ['-XX:+UnlockCommercialFeatures', '-XX:+FlightRecorder',
              '-XX:StartFlightRecording=delay=10s,duration=10d,name=fr-recording2,filename=fr-recording2.jfr,settings=profile']

if args.nodestats:
    flags += ['-Dpolyglot.nodestats.OutputFile=' + args.nodestats, '-Dpolyglot.nodestats=true']

if args.coverage != False:
    classpath += ':' + TRUFFLE_DIR + '/tools/mxbuild/dists/truffle-coverage.jar'
    flags += ['-Dpolyglot.coverage=true',
              '-Dpolyglot.coverage.Count=true',
              '-Dpolyglot.coverage.StrictLines=false',
              '-Dpolyglot.coverage.Output=' + args.coverage_type]
    if args.coverage:
      flags += ['-Dpolyglot.coverage.OutputFile=' + args.coverage]

if args.cpusampler != False:
    classpath += ':' + TRUFFLE_DIR + '/tools/mxbuild/dists/truffle-profiler.jar'
    flags += ['-Dpolyglot.cpusampler=true', '-Dpolyglot.cpusampler.Output=' + args.cpusampler]
    

if args.assert_:
    flags += ['-esa', '-ea']
else:
    flags += ['-dsa', '-da']
if not args.interpreter and not args.background_compilation:
    flags += ['-Dpolyglot.engine.BackgroundCompilation=false']
if not args.interpreter and args.no_compilation:
    flags.append('-Dpolyglot.engine.CompileOnly=__FAKE_METHOD_NON_EXISTING__')
if not args.interpreter and args.no_trace and not args.perf_warnings:
    flags += ['-Dpolyglot.engine.TraceInlining=false', '-Dpolyglot.engine.TraceCompilation=false']
if not args.interpreter and not args.graph_pe:
    flags += ['-Dpolyglot.engine.GraphPE=false']
if args.threads:
    flags += ['-Dsom.threads=%s' % args.threads ]
if args.java_interpreter:
    flags += ['-Xint']
if args.print_graal_options:
    flags += ['-XX:+JVMCIPrintProperties']

if args.java_properties:
    flags += ['-D' + property for property in args.java_properties]

if args.java_args:
    JAVA_ARGS += ['-' + property for property in args.java_args]

# HACK: Havlak needs a lot of stack to run reliably...
if 'Havlak' in args.args:
  # double the standard stack size
  # we don't do it always, because...
  JAVA_ARGS += ['-Xss3072k']

all_args = JAVA_ARGS + ['-classpath', classpath] + ['-Dtruffle.class.path.append=' + classpath] + flags + SOM_ARGS + unknown_args + args.args

if args.verbose:
    print "CMD: " + java_bin + ' ' + ' '.join(all_args)

env = dict(os.environ)
env['JVMCI_VERSION_CHECK'] = 'ignore'

try:
  os.execvpe(java_bin, all_args, env)
except OSError as e:
  if e.errno == 2 and e.strerror == "No such file or directory":
    print("Could not find JVM: " + java_bin)
    sys.exit(1)
